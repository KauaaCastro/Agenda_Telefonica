
 try {
            System.out.println("Abrindo tela inicial!");
            Parent secondView = FXMLLoader.load(getClass().getResource("/com/example/HomeScreen.fxml"));
            Scene secondScene = new Scene(secondView);

            // Para retornar a janela para a tela inicial
            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            currentStage.setScene(secondScene);
            currentStage.show();

        } catch (IOException e) {
            System.out.println("Ocorreu um erro ao tentar abrir a nova janela");
            System.out.println("Código do erro: ");
            System.out.println();
            e.getStackTrace();
        }

----------------------------------------------------------------------------------------------------------------------

// Abre o alerta ou tela como modal, ou seja, maxima prioridade impedindo o clique por FXMLLoader

  try {
  FXMLLoader loader = new
  FXMLLoader(getClass().getResource("/com/example/Alerts/Alert.fxml"));
  Parent root = loader.load();
  
  Stage alertStage = new Stage();
  alertStage.setTitle("Alerta!");
  alertStage.setScene(new Scene(root));
  
  alertStage.initModality(Modality.APPLICATION_MODAL);
  
  alertStage.showAndWait();
  
  } catch (IOException e) {
  System.out.println("Ocorreu um erro ao tentar exibir o alerta!");
  System.out.println("Código do erro: ");
  System.out.println();
  e.getStackTrace();
  }
 
------------------------------------------------------------------------------------------------------------------------

// Gera um alerta de aviso 

Alert alerta = new Alert(Alert.AlertType.ERROR);
            alerta.setTitle("Erro de Validação");
            alerta.setHeaderText("Campos obrigatórios não preenchidos");
            alerta.setContentText("Preencha nome, telefone e apelido antes de adicionar.");
            alerta.showAndWait();
            return; // <-- Cancela a adição

------------------------------------------------------------------------------------------------------------------------

// Fecha a página após um determinado click, ação ou etc...

 Stage stage = (Stage) Alert_Ok.getScene().getWindow();
        stage.close();

------------------------------------------------------------------------------------------------------------------------

// Código para remover o contato:

ContactService selectedContacts = table_1.getSelectionModel().getSelectedItem();

        if (selectedContacts == null) {
            Alert warning = new Alert(Alert.AlertType.WARNING);
            warning.setTitle("Nenhuma seleção de contato!");
            warning.setHeaderText("Nenhum contato foi selecionado!");
            warning.setContentText("Por favor, selecione algum contato da lista de contatos e tente novamente!");
            warning.showAndWait();

            return;
        }

        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/Alerts/AlertExclude.fxml"));
            Parent root = loader.load();

            AlertController deletContact = loader.getController();
            deletContact.setDeleteContact(selectedContacts);

            Stage alertStage = new Stage();
            alertStage.setTitle("Alerta!");
            alertStage.setScene(new Scene(root));

            alertStage.initModality(Modality.APPLICATION_MODAL);

            alertStage.showAndWait();

        } catch (IOException e) {
            System.out.println("Ocorreu um erro ao tentar exibir o alerta!");
            System.out.println("Código do erro: ");
            System.out.println();
            e.getStackTrace();
        }
-------------------------------------------------------------------------------------------------------------------------
 @FXML
    public void GoToExcludeContact(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/Alerts/AlertExclude.fxml"));
        Parent root = loader.load();

        AlertController controller = loader.getController();
        controller.viewToExclude(selectedContact);

        Stage alertStage = new Stage();
        alertStage.setTitle("Alerta!");
        alertStage.setScene(new Scene(root));
        alertStage.initModality(Modality.APPLICATION_MODAL);
        alertStage.showAndWait();

        Stage currentStage = (Stage) newExcludeContact.getScene().getWindow();
        currentStage.close();
    }

-------------------------------------------------------------------------------------------------------------------------

Comandos para o github: 

Página de código ativa: 65001

C:\Users\Cricca\OneDrive\Documentos\NetBeansProjects\Agenda>git add .

C:\Users\Cricca\OneDrive\Documentos\NetBeansProjects\Agenda>git commit -m "Release 9.0"
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

C:\Users\Cricca\OneDrive\Documentos\NetBeansProjects\Agenda>git branch -M main

C:\Users\Cricca\OneDrive\Documentos\NetBeansProjects\Agenda>git push -u origin main
Enumerating objects: 118, done.
Counting objects: 100% (118/118), done.
Delta compression using up to 16 threads
Compressing objects: 100% (70/70), done.
Writing objects: 100% (81/81), 94.09 KiB | 6.27 MiB/s, done.
Total 81 (delta 22), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (22/22), completed with 14 local objects.
To https://github.com/KauaaCastro/Agenda_Telefonica.git
   906068c..4bf7494  main -> main
branch 'main' set up to track 'origin/main'.

/////////////////////////////////

SortedList<ContactService> sortedData = new SortedList<>(filteredData);
        sortedData.comparatorProperty().bind(Table_ListTask.comparatorProperty());

        Table_ListTask.setItems(sortedData);
        
 Table_ListTask.setOnMouseClicked(event -> {
            if (event.getClickCount() == 2) {
                ContactService contact = Table_ListTask.getSelectionModel().getSelectedItem();

                if (contact != null) {
                    contact.setSelected(!contact.getSelected());
                    Table_ListTask.refresh();
                }

                if (contact.getSelected()) {
                    try {
                        FXMLLoader loader = new FXMLLoader(
                                getClass().getResource("/com/example/Alerts/AlertViewContacts(Add).fxml"));
                        Parent root = loader.load();

                        AlertViewController controller = loader.getController();
                        controller.ShowInformations(contact);
                        Stage stage = new Stage();
                        stage.setTitle("Seleção de contatos");
                        stage.setScene(new Scene(root));
                        stage.initModality(Modality.APPLICATION_MODAL);
                        stage.show();

                    } catch (IOException e) {
                        e.printStackTrace();
                        System.out.println("");
                        System.out.println("Ocorreu um erro ao visualizar contato");
                    }
                }
            }
        });

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

| Classe                                         | Para que serve?                                             | Quando usar?                                         |
| ---------------------------------------------- | ----------------------------------------------------------- | ---------------------------------------------------- |
| `TaskService`                                  | Representa a tarefa, com todos os seus dados.               | Sempre que quiser mostrar, criar, editar uma tarefa. |
| `TaskContactRelation`                          | Representa o vínculo entre uma tarefa e contatos (por IDs). | Quando associar ou buscar contatos de uma tarefa.    |
| `TaskContactState`                             | Guarda todas as relações tarefa-contato do sistema.         | Quando quiser buscar, adicionar ou excluir relações. |
| `ContactService` (não mostrado, mas você tem)  | Representa um contato real, com nome, telefone etc.         | Quando quiser mostrar ou trabalhar com contatos.     |
| `ContactAppState` (não mostrado, mas você tem) | Guarda todos os contatos do sistema.                        | Quando quiser buscar um contato por ID.              |
